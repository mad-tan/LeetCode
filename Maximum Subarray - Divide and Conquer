Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

Techniques I used: Divide and Conquer

//Easy approach O(n)
class Solution {
    public int maxSubArray(int[] nums) {
        int currSum = nums[0];
        int maxSum = nums[0];
        for(int i = 1; i<nums.length;++i){
            currSum+=nums[i];
            currSum = Math.max(nums[i],currSum);
            maxSum = Math.max(maxSum,currSum);
        }
        return maxSum;
    }
}

//Divide and Conquer appraoch
class Solution {
    private int[] globalNums;
    public int maxSubArray(int[] nums) {
       globalNums = nums;
       return maxSubArray(0,globalNums.length-1); 
    }
    public int maxSubArray(int left, int right){
        if (left > right) {
            return Integer.MIN_VALUE;
        }
        int mid = left + (right - left) / 2, maxLeft = 0, maxRight = 0;
        int lmax = maxSubArray( left, mid - 1);
        int rmax = maxSubArray( mid + 1, right);
        for (int i = mid - 1, sum = 0; i >= left; i--) {
            sum += globalNums[i];
            maxLeft = Math.max(sum, maxLeft);
        }
        for (int i = mid + 1, sum = 0; i <= right; i++) {
            sum += globalNums[i];
            maxRight = Math.max(sum, maxRight);
        }
        return Math.max(Math.max(lmax, rmax), maxLeft + maxRight + globalNums[mid]);
    }
}
