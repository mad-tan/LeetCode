Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

Techniques I used: DFS

class Solution {
    int res = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        int temp = helper(root);
        return res;
    }
    public int helper(TreeNode root){
        if(root==null)  return 0;
        int leftMaxSum = Math.max(0,helper(root.left));
        int rightMaxSum = Math.max(0,helper(root.right));
        res = Math.max(res,leftMaxSum+rightMaxSum+root.val);
        return root.val+Math.max(leftMaxSum,rightMaxSum);
    }
}
