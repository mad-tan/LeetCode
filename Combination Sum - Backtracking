Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Techniques I used: Recursion with Backtracking

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSum(0,target,res,new ArrayList<Integer>(),candidates);
        return res;
        
    }
    public void combinationSum(int start, int target,List<List<Integer>> res, List<Integer> temp, int[] candidates){
        if(target==0)   res.add(new ArrayList<>(temp));
        else if(target<0)   return;
        else{
            for(int i = start;i<candidates.length;++i){
                if(candidates[i] <= target){
                    temp.add(candidates[i]);
                    combinationSum(i,target-candidates[i],res,temp,candidates);
                    temp.remove(temp.size()-1);
                }
                else return;
            }
        }
    }
}
