Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

Example 2:
Input: board = [["X"]]
Output: [["X"]]

Techniques I used: Recursion DFS(O(mn))

class Solution {
    public void solve(char[][] board) {
        //top and bottom row
        for(int i = 0;i<board[0].length;++i){
            if(board[0][i]=='O')    dfs(board,0,i);
            if(board[board.length-1][i]=='O')    dfs(board,board.length-1,i);
        } 
        //first and last column
        for(int i = 0;i<board.length;++i){
            if(board[i][0]=='O')    dfs(board,i,0);
            if(board[i][board[0].length-1]=='O')    dfs(board,i,board[0].length-1);
        }        
    
        //changing the board
        for(int i = 0; i<board.length;++i){
            for(int j=0;j<board[0].length;++j){
                if(board[i][j]=='O')    board[i][j]='X';
                if(board[i][j]=='T')    board[i][j]='O';
            }
        }

    }
    public void dfs(char[][] board, int i, int j){
        if(i<0 || j<0 || i>=board.length || j>=board[0].length || board[i][j]!='O') return;
        board[i][j] = 'T';
        dfs(board,i-1,j);
        dfs(board,i+1,j);
        dfs(board,i,j-1);
        dfs(board,i, j+1);
    }
}
