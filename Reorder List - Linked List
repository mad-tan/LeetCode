Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

Techniques I used: Linked List

//Brute Force: Keep reversing the list after every element O(n^2)
class Solution {
    public void reorderList(ListNode head) {
       ListNode temp = head;
       while(temp!=null){
           temp.next = reverseList(null,temp.next);
           temp = temp.next;
       } 
    }
    public ListNode reverseList(ListNode prev, ListNode curr){
        if(curr==null){
            return prev;
        }
        ListNode next = curr.next;
        curr.next = prev;
        return reverseList(curr,next);

    }
}

//Optimal O(n)
class Solution {
    public void reorderList(ListNode head) {
        if(head==null || head.next==null)   return;
        ListNode slow = null; 
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow = (slow==null)?head:slow.next;
            fast = fast.next.next;
       }
       ListNode split = slow.next;
       slow.next = null;
       split = reverse(split);
       merge(head, split);

    }
    public void merge(ListNode node1, ListNode node2){
       ListNode temp1 = null;
       ListNode temp2 = null;
       while(node1!=null){
           temp1 = node1.next;
           temp2 = node2.next;
           node1.next = node2;
           node2.next = temp1!=null?temp1:temp2;
           node1 = temp1;
           node2 = temp2;
       } 
    }
    public ListNode reverse(ListNode head){
        if(head==null || head.next==null)   return head;
        ListNode prev = null;
        ListNode curr = head;
        while(curr!=null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
