Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

Techniques I used: Sliding Window O(m+n)

class Solution {
    public String minWindow(String s, String t) {
        if(s.length()<t.length())   return "";
        HashMap<Character,Integer> tMap = new HashMap<>();
        int tcount = 0;
        for(char c:t.toCharArray()){
            tMap.put(c,tMap.getOrDefault(c,0)+1);
        }
        int left = 0;
        int minLength = Integer.MAX_VALUE;
        String result = "";
        for(int right = 0;right<s.length();++right){
            if(tMap.containsKey(s.charAt(right))){
                tMap.put(s.charAt(right),tMap.get(s.charAt(right))-1);
                if(tMap.get(s.charAt(right))>=0)tcount++;
                while(tcount==t.length()){
                    int tempLength = right-left+1;
                    if(tempLength <= minLength){
                        minLength = tempLength;
                        result = s.substring(left,right+1);
                    }
                    if(tMap.containsKey(s.charAt(left))){
                    tMap.put(s.charAt(left),tMap.get(s.charAt(left))+1);
                        if(tMap.get(s.charAt(left))>0)tcount--;
                    }
                    left++; 
               }
           }
       }
        return result;
    }
}
