Example 1:
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Example 2:
Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.

Techniques I used: Sliding Window

Note: Can use Array instead of HashMap
class Solution {
    public int characterReplacement(String s, int k) {
        int left = 0;
       
        int res = 0;
        HashMap<Character,Integer> map = new HashMap<>();
        for(int right = 0;right<s.length();++right){
            map.put(s.charAt(right),map.getOrDefault(s.charAt(right),0)+1);
            int maxChar = maxChar(map);
            int currLen = right-left+1;
            if(currLen - maxChar <= k){
                res = Math.max(res,right-left+1);
            }
            else{
                map.put(s.charAt(left),map.get(s.charAt(left))-1);
                left+=1;
            }
        }
        return res;
    }
    public int maxChar(HashMap<Character,Integer> map){
        int max = Integer.MIN_VALUE;
        for(int n:map.values()){
            if(n>max)   max = n;
        }
        return max;
    }
}
