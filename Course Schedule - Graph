Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Techniques I used: Adjacency List with cycle detection

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0;i<numCourses;++i){
            graph.add(new ArrayList<>());
        }
        for(int[] pre: prerequisites){
            graph.get(pre[0]).add(pre[1]);
        }
        int[] visited = new int[numCourses];
        for(int i=0;i<graph.size();++i){
            if(visited[i]==0){
                if(!isCyclic(graph, visited, i))    continue;
                else return false;
            }
        }
        return true;
    }
    public boolean isCyclic(List<List<Integer>> graph, int[] visited, int child){
        if(visited[child]==2)   return true;
        visited[child] = 2;
        for(int c:graph.get(child)){
            if(visited[c]!=1){
                if(isCyclic(graph, visited, c))    return true;
            }
        }
        visited[child] = 1;
        return false;
    }
}
